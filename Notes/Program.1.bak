namespace Server
{
    using Renci.SshNet;
    using System;
    using System.Diagnostics;
    using System.IO;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Sequential)]
    public struct MSG
    {
        public IntPtr hwnd;
        public IntPtr lParam;
        public int message;
        public int pt_x;
        public int pt_y;
        public int time;
        public IntPtr wParam;
    }

    [StructLayout(LayoutKind.Explicit, Size = 20)]
    public struct KeyboardHookStruct
    {
        [FieldOffset(16)] public IntPtr dwExtraInfo;
        [FieldOffset(8)] public int Flags;
        [FieldOffset(0)] public Key Key;
        [FieldOffset(4)] public int ScanCode;
        [FieldOffset(12)] public int Time;
    }

    public enum KeyStaus
    {
        KeyDown = 0x0100,
        KeyUp = 0x0101,
        SysKeyDown = 0x0104,
        SysKeyUp = 0x0105
    }

    public enum HookID
    {
        Callwndproc = 4,
        Callwndprocert = 12,
        Cbt = 5,
        Debug = 9,
        Foregroundidle = 11,
        GetMessage = 3,
        JournalPlayback = 1,
        JournalRecord = 0,
        Keyboard = 2,
        Keyboard_LL = 13,
        Mouse = 7,
        MouseLL = 14,
        MsgFilter = -1,
        Shell = 10,
        SysmsgFilter = 6
    }

    public enum Key
    {
        LeftButton = 0x01,
        RightButton = 0x02,
        Cancel = 0x03,
        MiddleButton = 0x04,
        XButton1 = 0x05,
        XButton2 = 0x06,
        BackSpace = 0x08,
        Tab = 0x09,
        Clear = 0x0C,
        Return = 0x0D,
        Enter = Return,
        Shift = 0x10,
        Control = 0x11,
        Menu = 0x12,
        Pause = 0x13,
        CapsLock = 0x14,
        IMEKana = 0x15,
        IMEHanguel = IMEKana,
        IMEHangul = IMEKana,
        IMEJunja = 0x17,
        IMEFinal = 0x18,
        IMEHanja = 0x19,
        IMEKanji = IMEHanja,
        Escape = 0x1B,
        IMEConvert = 0x1C,
        IMENonConvvert = 0x1D,
        IMEAccept = 0x1E,
        IMEModeChange = 0x1F,
        SpaceBar = 0x20,
        PageUp = 0x21,
        PageDown = 0x22,
        End = 0x23,
        Home = 0x24,
        Left = 0x25,
        Up = 0x26,
        Right = 0x27,
        Down = 0x28,
        Select = 0x29,
        Print = 0x2A,
        Execute = 0x2B,
        Snapshot = 0x2C,
        Insert = 0x2D,
        Delete = 0x2E,
        Help = 0x2F,
        Key0 = 0x30,
        Key1 = 0x31,
        Key2 = 0x32,
        Key3 = 0x33,
        Key4 = 0x34,
        Key5 = 0x35,
        Key6 = 0x36,
        Key7 = 0x37,
        Key8 = 0x38,
        Key9 = 0x39,
        KeyA = 0x41,
        KeyB = 0x42,
        KeyC = 0x43,
        KeyD = 0x44,
        KeyE = 0x45,
        KeyF = 0x46,
        KeyG = 0x47,
        KeyH = 0x48,
        KeyI = 0x49,
        KeyJ = 0x4A,
        KeyK = 0x4B,
        KeyL = 0x4C,
        KeyM = 0x4D,
        KeyN = 0x4E,
        KeyO = 0x4F,
        KeyP = 0x50,
        KeyQ = 0x51,
        KeyR = 0x52,
        KeyS = 0x53,
        KeyT = 0x54,
        KeyU = 0x55,
        KeyV = 0x56,
        KeyW = 0x57,
        KeyX = 0x58,
        KeyY = 0x59,
        KeyZ = 0x5A,
        LeftWinKey = 0x5B,
        RightWinKey = 0x5C,
        AppsKey = 0x5D,
        Sleep = 0x5F,
        NumPad0 = 0x60,
        NumPad1 = 0x61,
        NumPad2 = 0x62,
        NumPad3 = 0x63,
        NumPad4 = 0x64,
        NumPad5 = 0x65,
        NumPad6 = 0x66,
        NumPad7 = 0x67,
        NumPad8 = 0x68,
        NumPad9 = 0x69,
        Multiply = 0x6A,
        Add = 0x6B,
        Separator = 0x6C,
        Subtract = 0x6D,
        Decimal = 0x6E,
        Divide = 0x6F,
        F1 = 0x70,
        F2 = 0x71,
        F3 = 0x72,
        F4 = 0x73,
        F5 = 0x74,
        F6 = 0x75,
        F7 = 0x76,
        F8 = 0x77,
        F9 = 0x78,
        F10 = 0x79,
        F11 = 0x7A,
        F12 = 0x7B,
        F13 = 0x7C,
        F14 = 0x7D,
        F15 = 0x7E,
        F16 = 0x7F,
        F17 = 0x80,
        F18 = 0x81,
        F19 = 0x82,
        F20 = 0x83,
        F21 = 0x84,
        F22 = 0x85,
        F23 = 0x86,
        F24 = 0x87,
        NumLock = 0x90,
        ScrollLock = 0x91,
        OEM92 = 0x92,
        OEM93 = 0x93,
        OEM94 = 0x94,
        OEM95 = 0x95,
        OEM96 = 0x96,
        LeftShfit = 0xA0,
        RightShfit = 0xA1,
        LeftCtrl = 0xA2,
        RightCtrl = 0xA3,
        LeftMenu = 0xA4,
        RightMenu = 0xA5,
        BrowserBack = 0xA6,
        BrowserForward = 0xA7,
        BrowserRefresh = 0xA8,
        BrowserStop = 0xA9,
        BrowserSearch = 0xAA,
        BrowserFavorites = 0xAB,
        BrowserHome = 0xAC,
        BrowserVolumeMute = 0xAD,
        BrowserVolumeDown = 0xAE,
        BrowserVolumeUp = 0xAF,
        MediaNextTrack = 0xB0,
        MediaPreviousTrack = 0xB1,
        MediaStop = 0xB2,
        MediaPlayPause = 0xB3,
        LaunchMail = 0xB4,
        LaunchMediaSelect = 0xB5,
        LaunchApp1 = 0xB6,
        LaunchApp2 = 0xB7,
        OEM1 = 0xBA,
        OEMPlus = 0xBB,
        OEMComma = 0xBC,
        OEMMinus = 0xBD,
        OEMPeriod = 0xBE,
        OEM2 = 0xBF,
        OEM3 = 0xC0,
        OEM4 = 0xDB,
        OEM5 = 0xDC,
        OEM6 = 0xDD,
        OEM7 = 0xDE,
        OEM8 = 0xDF,
        OEM102 = 0xE2,
        IMEProcess = 0xE5,
        Packet = 0xE7,
        Attn = 0xF6,
        CrSel = 0xF7,
        ExSel = 0xF8,
        EraseEOF = 0xF9,
        Play = 0xFA,
        Zoom = 0xFB,
        PA1 = 0xFD,
        OEMClear = 0xFE
    }

    public class Keyboard
    {
        public delegate IntPtr KeyboardHookProc(int code, IntPtr wParam, IntPtr lParam);

        public delegate void KeyEvent(object sender, KeyEventArg e);

        private event KeyboardHookProc keyhookevent;
        public event KeyEvent KeyDown;
        public event KeyEvent KeyUp;
        private IntPtr hookPtr;

        public Keyboard()
        {
            this.keyhookevent += KeyboardHook_keyhookevent;
        }

        [DllImport("User32.dll")]
        private static extern IntPtr CallNextHookEx(IntPtr hook, int code, IntPtr wParam, IntPtr lParam);

        [DllImport("User32.dll")]
        private static extern IntPtr SetWindowsHookExA(HookID hookID, KeyboardHookProc lpfn, IntPtr hmod,
            int dwThreadId);

        [DllImport("kernel32.dll")]
        static extern IntPtr GetConsoleWindow();

        private IntPtr KeyboardHook_keyhookevent(int code, IntPtr wParam, IntPtr lParam)
        {
            KeyStaus ks = (KeyStaus) wParam.ToInt32();
            KeyboardHookStruct khs = (KeyboardHookStruct) Marshal.PtrToStructure(lParam, typeof(KeyboardHookStruct));
            KeyEvent ke = ks == KeyStaus.KeyDown || ks == KeyStaus.SysKeyDown ? KeyDown : KeyUp;
            if (ke != null)
            {
                ke.Invoke(this, new KeyEventArg()
                {
                    Key = khs.Key,
                    KeyStaus = ks
                });
            }

            return CallNextHookEx(IntPtr.Zero, code, wParam, lParam);
        }

        public void ConfigHook()
        {
            hookPtr = SetWindowsHookExA(HookID.Keyboard_LL, keyhookevent, IntPtr.Zero, 0);
            if (hookPtr == null)
                throw new Exception();
        }
    }

    public class KeyEventArg
    {
        public Key Key;
        public KeyStaus KeyStaus;
    }

    class Program
    {
        static string _applicationDir = @"C:\Users\psycho\RiderProjects\Psycho\Psycho\";
        static string _host = "47.106.105.122";
        static string _password = "q4so4tDtz!";
        static string _username = "root";

        [DllImport("user32.dll", CharSet = System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int DispatchMessage([In] ref MSG msg);

        [DllImport("user32.dll")]
        public static extern sbyte GetMessage(out MSG lpMsg, IntPtr hWnd, uint wMsgFilterMin,
            uint wMsgFilterMax);

        [DllImport("user32.dll", CharSet = CharSet.Auto)]
        public static extern bool TranslateMessage([In, Out] ref MSG msg);

        private static void ConnectSsh(Action<SshClient> action)
        {
            Console.WriteLine("[连接ssh]: {0}", _host);
            using var ftp = new SshClient(_host, _username, _password);
            var stopWatch = new Stopwatch();
            stopWatch.Start();
            ftp.Connect();
            Console.WriteLine("[连接ssh时间]: {0}微秒", stopWatch.ElapsedMilliseconds);
            action(ftp);
        }

        private static void RunCommandString(SshClient client, string command)
        {
            var m = client.RunCommand(command);
            Console.WriteLine("[执行命令]: {0},{1}", command, m.Result);
        }

        private static void UploadApplication()
        {
            var binDir = Path.Combine(_applicationDir, @"bin\Release\net5.0\linux-x64\publish");
            var process = Process.Start(new ProcessStartInfo
            {
                WorkingDirectory = _applicationDir,
                FileName = "dotnet",
                Arguments =
                    "publish --configuration Release -r linux-x64 -p:PublishSingleFile=true --self-contained false"
            });
            process?.WaitForExit();
            ConnectSsh(ssh =>
            {
                RunCommandString(ssh, "sudo systemctl stop psycho.service");
                ConnectFtp(ftp =>
                {
                    var files = Directory.GetFiles(binDir, "*.*", SearchOption.AllDirectories);
                    foreach (var filename in files)
                    {
                        if (filename.EndsWith(".pdb"))
                            continue;
                        var name = "/root/bin/" + filename.Substring(binDir.Length + 1).Replace("\\", "/");
                        UploadFile(ftp, filename, name, true);
                    }
                });
                RunCommandString(ssh, "sudo systemctl start psycho.service");
            });
        }

        private static void UploadFile(ISftpClient ftp, string filename, string serverFileName, bool checkDir = false)
        {
            if (checkDir)
            {
                var pieces = serverFileName.Split('/');
                var rootPath = string.Empty;
                for (var i = 1; i < pieces.Length - 1; i++)
                {
                    rootPath = rootPath + "/" + pieces[i];
                    if (!ftp.Exists(rootPath))
                    {
                        ftp.CreateDirectory(rootPath);
                    }
                }
            }

            using var stream = File.OpenRead(filename);
            ftp.UploadFile(stream, serverFileName);
        }

        private static void UploadNginx()
        {
            ConnectFtp(ftp =>
            {
                using var stream = File.OpenRead(Path.Combine(_applicationDir, @"Notes\nginx.conf"));
                ftp.UploadFile(stream, "/etc/nginx/nginx.conf");
            });
            ConnectSsh(ssh => { Console.WriteLine("[UploadNginx]: {0}", ssh.RunCommand("nginx -s reload").Result); });
        }

        private static void UploadService()
        {
            ConnectFtp(ftp =>
            {
                using var stream = File.OpenRead(Path.Combine(_applicationDir, @"Notes\psycho.service"));
                ftp.UploadFile(stream, "/etc/systemd/system/psycho.service");
            });
            ConnectSsh(ssh =>
            {
                Console.WriteLine("[UploadNginx]: {0}", ssh.RunCommand("sudo systemctl enable psycho.service").Result);
                Console.WriteLine("[UploadNginx]: {0}", ssh.RunCommand("sudo journalctl -fu psycho.service").Result);
            });
        }

        public static void DownloadNginx()
        {
            ConnectFtp(ftp =>
            {
                using var nginx = new FileStream(Path.Combine(_applicationDir, @"Notes\nginx.conf"),
                    FileMode.OpenOrCreate);
                ftp.DownloadFile("/etc/nginx/nginx.conf", nginx);
            });
        }

        private static void UploadResourceFiles()
        {
            const string dir = @"C:\Users\psycho\RiderProjects\Psycho\Psycho\wwwroot";
            using var ftp = new SftpClient(_host, 22, _username, _password);
            ftp.Connect();
            const string serverDirectory = "/root/bin/wwwroot";
            if (!ftp.Exists(serverDirectory))
            {
                ftp.CreateDirectory(serverDirectory);
            }

            var first = false;
            var files = Directory.GetFiles(dir, "*", SearchOption.AllDirectories);
            Array.ForEach(files, f =>
            {
                Console.WriteLine("[上传资源文件]: {0}", f);
                using var stream = File.OpenRead(f);
                UploadFile(ftp, f, serverDirectory + "/" + f.Substring(dir.Length).Replace('\\', '/'), !first);
                first = true;
            });
        }

        static void ConnectFtp(Action<SftpClient> action)
        {
            Console.WriteLine("连接FTP, {0}", _host);
            using var ftp = new SftpClient(_host, _username, _password);
            var stopWatch = new Stopwatch();
            stopWatch.Start();
            ftp.Connect();
            Console.WriteLine("连接FTP, {0}微秒", stopWatch.ElapsedMilliseconds);
            action(ftp);
        }

        static void Main(string[] args)
        {
            // UploadApplication();
            // UploadNginx();
            //  sudo chmod u+x /root/bin/Psycho
            //    UploadService();
            // sudo lsof -i -P -n | grep LISTEN
            var kbh = new Keyboard();
            kbh.ConfigHook();
            kbh.KeyDown += (s, k) =>
            {
                if (k.KeyStaus != KeyStaus.SysKeyDown) return;
                switch (k.Key)
                {
                    case Key.F9:
                    {
                        UploadResourceFiles();
                        break;
                    }
                }
            };
            while (GetMessage(out var message, IntPtr.Zero, 0, 0) != 0)
            {
                TranslateMessage(ref message);
                DispatchMessage(ref message);
            }
        }
    }
}
 